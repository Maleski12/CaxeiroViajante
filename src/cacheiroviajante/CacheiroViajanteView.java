/*
 * CacheiroViajanteView.java
 */
package cacheiroviajante;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class CacheiroViajanteView extends FrameView {

    public void main() {
    }

    public CacheiroViajanteView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = CacheiroViajanteApp.getApplication().getMainFrame();
            aboutBox = new CacheiroViajanteAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        CacheiroViajanteApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        B1 = new javax.swing.JButton();
        P1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        B2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Tab2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        CB = new javax.swing.JComboBox();
        B3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tab3 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Te = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setName("jPanel3"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cacheiroviajante.CacheiroViajanteApp.class).getContext().getResourceMap(CacheiroViajanteView.class);
        B1.setText(resourceMap.getString("B1.text")); // NOI18N
        B1.setName("B1"); // NOI18N
        B1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B1MouseClicked(evt);
            }
        });

        P1.setBackground(resourceMap.getColor("P1.background")); // NOI18N
        P1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        P1.setMaximumSize(new java.awt.Dimension(320, 320));
        P1.setMinimumSize(new java.awt.Dimension(320, 320));
        P1.setName("P1"); // NOI18N
        P1.setPreferredSize(new java.awt.Dimension(320, 320));
        P1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                P1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout P1Layout = new javax.swing.GroupLayout(P1);
        P1.setLayout(P1Layout);
        P1Layout.setHorizontalGroup(
            P1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        P1Layout.setVerticalGroup(
            P1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        jPanel8.setName("jPanel8"); // NOI18N
        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.LINE_AXIS));

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(B1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                                .addComponent(P1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(P1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(B1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setName("jPanel4"); // NOI18N

        jPanel6.setName("jPanel6"); // NOI18N

        B2.setText(resourceMap.getString("B2.text")); // NOI18N
        B2.setName("B2"); // NOI18N
        B2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B2MouseClicked(evt);
            }
        });

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(B2, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(B2)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        Tab2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null, null, null, null, null, null, null, null, null, null, null},
                {"2", null, null, null, null, null, null, null, null, null, null, null},
                {"3", null, null, null, null, null, null, null, null, null, null, null},
                {"4", null, null, null, null, null, null, null, null, null, null, null},
                {"5", null, null, null, null, null, null, null, null, null, null, null},
                {"6", null, null, null, null, null, null, null, null, null, null, null},
                {"7", null, null, null, null, null, null, null, null, null, null, null},
                {"8", null, null, null, null, null, null, null, null, null, null, null},
                {"9", null, null, null, null, null, null, null, null, null, null, null},
                {"10", null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Individuos", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "Distancia"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tab2.setName("Tab2"); // NOI18N
        jScrollPane3.setViewportView(Tab2);

        jPanel5.setName("jPanel5"); // NOI18N

        CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "20", "30", "40","50","100","150","200","250","300","400","500","600","700","800","900","1000","3000","5000","7000","10000" }));
        CB.setName("CB"); // NOI18N

        B3.setText(resourceMap.getString("B3.text")); // NOI18N
        B3.setName("B3"); // NOI18N
        B3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B3MouseClicked(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CB, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(B3, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(CB, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        Tab3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10"
            }
        ));
        Tab3.setName("Tab3"); // NOI18N
        jScrollPane4.setViewportView(Tab3);
        Tab3.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("Tab3.columnModel.title0")); // NOI18N
        Tab3.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("Tab3.columnModel.title1")); // NOI18N
        Tab3.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("Tab3.columnModel.title2")); // NOI18N
        Tab3.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("Tab3.columnModel.title3")); // NOI18N
        Tab3.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("Tab3.columnModel.title4")); // NOI18N
        Tab3.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("Tab3.columnModel.title6")); // NOI18N
        Tab3.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("Tab3.columnModel.title7")); // NOI18N
        Tab3.getColumnModel().getColumn(7).setHeaderValue(resourceMap.getString("Tab3.columnModel.title8")); // NOI18N
        Tab3.getColumnModel().getColumn(8).setHeaderValue(resourceMap.getString("Tab3.columnModel.title9")); // NOI18N
        Tab3.getColumnModel().getColumn(9).setHeaderValue(resourceMap.getString("Tab3.columnModel.title10")); // NOI18N

        jPanel7.setName("jPanel7"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        Te.setEditable(false);
        Te.setText(resourceMap.getString("Te.text")); // NOI18N
        Te.setName("Te"); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Te, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Te, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(cacheiroviajante.CacheiroViajanteApp.class).getContext().getActionMap(CacheiroViajanteView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setLayout(new java.awt.CardLayout());

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N
        statusPanel.add(statusPanelSeparator, "card2");

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N
        statusPanel.add(statusMessageLabel, "card3");

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N
        statusPanel.add(statusAnimationLabel, "card4");

        progressBar.setName("progressBar"); // NOI18N
        statusPanel.add(progressBar, "card5");

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

int[][] CORDENADAS = new int[10][2];
    
float DISTANCIAS[][] = new float[10][10];

    private void B2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B2MouseClicked

        //carega as distancias -------------------------------------------------
        for (int i = 0; i < 10; i++) {

                for (int j = 0; j < 10; j++) {
                        //D²=(Xb-Xa)²+(Yb-Ya)²

                        float Xa = (CORDENADAS[i][0] - 10) / 3;
                        float Ya = (CORDENADAS[i][1] - 10) / 3;

                        float Xb = (CORDENADAS[j][0] - 10) / 3;
                        float Yb = (CORDENADAS[j][1] - 10) / 3;

                        DISTANCIAS[i][j] = (float) Math.sqrt(Math.pow(Xb - Xa, 2) + Math.pow(Yb - Ya, 2));
                        DISTANCIAS[j][i] = (float) Math.sqrt(Math.pow(Xb - Xa, 2) + Math.pow(Yb - Ya, 2));
                }
        }
        //----------------------------------------------------------------------



       // cria os 10 individuos iniciais da populacao
        Viajante[] viajante = new Viajante[10];
        for(int i=0;i<10;i++)
                      viajante[i] = new Viajante();


        for (int i = 0; i < 10; i++) {
            viajante[i] = new Viajante();

            int[] c = new int[10];

            for (int j = 0; j < 10; j++) {
                c[j] = Integer.parseInt(Tab2.getValueAt(i, j+1).toString())-1;
            }

            viajante[i].setCaminho(c);
            viajante[i].CalDistancia(DISTANCIAS);
            Tab2.setValueAt(viajante[i].getDistP(), i, 11);
        }

        //--Numerode geracoes------------------

        int NGeracoes = 10;

        int id = CB.getSelectedIndex();

        switch (id) {
            case 0:
                NGeracoes = 10;
                break;
            case 1:
                NGeracoes = 20;
                break;
            case 2:
                NGeracoes = 30;
                break;
            case 3:
                NGeracoes = 40;
                break;
            case 4:
                NGeracoes = 50;
                break;
            case 5:
                NGeracoes = 100;
                break;
            case 6:
                NGeracoes = 150;
                break;
            case 7:
                NGeracoes = 200;
                break;
            case 8:
                NGeracoes = 250;
                break;
            case 9:
                NGeracoes = 300;
                break;
            case 10:
                NGeracoes = 400;
                break;
            case 11:
                NGeracoes = 500;
                break;
            case 12:
                NGeracoes = 600;
                break;
            case 13:
                NGeracoes = 700;
                break;
            case 14:
                NGeracoes = 800;
                break;
            case 15:
                NGeracoes = 900;
                break;
            case 16:
                NGeracoes = 1000;
                break;
            case 17:
                NGeracoes = 3000;
                break;
            case 18:
                NGeracoes = 5000;
                break;
            case 19:
                NGeracoes = 7000;
                break;
            case 20:
                NGeracoes = 10000;
                break;

        }

        // definicoes iniciais
		boolean mostrarEvolucao = false;
		float taxaMortalidade = (float) 0.5;

		//inicializando genes dos individuos aleatoriamente
		//DNA_Aleatorio(viajante,DISTANCIAS);
                // for(int i=0;i<10;i++)
                  //   System.out.println(viajante[0].getCaminho()[i]);

		//calcularResultado(viajante, DISTANCIAS);
		ordenar(viajante);
		if (mostrarEvolucao)
                {
                    System.out.println("Geracao: 0\n");
			imprimir(viajante);
                }

		for (int i = 0; i < NGeracoes ; i++) {
			renovarCromossomos(viajante, taxaMortalidade);
			calcularResultado(viajante, DISTANCIAS);
			ordenar(viajante);
			if (mostrarEvolucao) {
				System.out.println("Geracao: " + (i + 1));
				imprimir(viajante);
			}
		}
		// exibe o resultado
		//Resultado(viajante);





      for(int i=0;i<10;i++)
          Tab3.setValueAt(viajante[0].getCaminho()[i]+1, 0, i);

          Te.setText(""+viajante[0].getDistP());




        //======================================================================
        //gera 2° grafico

        Graphics g2 = P1.getGraphics();
        Graphics2D g2d2 = (Graphics2D) g2;

        g2d2.setColor(Color.WHITE);
        g2d2.fillRect(0, 0, 320, 320);

        g2d2.setColor(Color.YELLOW);

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if (i != j) {
                    g2d2.drawLine(CORDENADAS[i][0], CORDENADAS[i][1], CORDENADAS[j][0], CORDENADAS[j][1]);
                }
            }
        }

        g2d2.setColor(Color.green);


        for (int i = 0; i < 9; i++) {

            g2d2.drawLine(CORDENADAS[viajante[0].getCaminho()[i]][0], CORDENADAS[viajante[0].getCaminho()[i]][1],
                    CORDENADAS[viajante[0].getCaminho()[i + 1]][0], CORDENADAS[viajante[0].getCaminho()[i + 1]][1]);
        }
        g2d2.drawLine(CORDENADAS[viajante[0].getCaminho()[0]][0], CORDENADAS[viajante[0].getCaminho()[0]][1],
                CORDENADAS[viajante[0].getCaminho()[9]][0], CORDENADAS[viajante[0].getCaminho()[9]][1]);

        for (int i = 0; i < 10; i++) {
            g2d2.setColor(Color.DARK_GRAY);
            g2d2.drawString("" + (i + 1), CORDENADAS[i][0] - 3, CORDENADAS[i][1] - 5);
            g2d2.setColor(Color.red);
            g2d2.drawOval(CORDENADAS[i][0] - 2, CORDENADAS[i][1] - 2, 5, 5);
        }


    }//GEN-LAST:event_B2MouseClicked



    private static void Resultado(Viajante[] viajante) {
		for (int i = 0; i < 10; i++) {
				System.out.print((viajante[0].getCaminho()[i]+1) + " => ");
			}
			System.out.print((viajante[0].getCaminho()[0]+1) + " ");
			System.out.println("Melhor Distancia: " + viajante[0].getDistP());
	}









  //ok
        private static void ordenar(Viajante[] viajante) {
		// ordenando
		for (int i = 0; i < 10; i++) {
			for (int j = i; j < 10; j++) {
				if (viajante[i].getDistP() > viajante[j].getDistP()) {

                                        Viajante v = new Viajante();
                                        int vTmp;

					int[] vvTmp = new int[10];

                                        v = viajante[i];
                                        viajante[i] = viajante[j];
                                        viajante[j] =v;

				}
			}
		}
	}


private static void DNA_Aleatorio(Viajante[] viajante,float[][] distancias) {
		// inicializando genes  dos individuos aleatoriamente
		int[] c_tmp = new int[10];

		int i, i2;
		for (i = 0; i < 10; i++) {
			boolean crom_valido = false;
			while (!crom_valido) {
				crom_valido = true;
				c_tmp = resetaCromossomo();

				// gerando cromossomo - ok
				for (i2 = 0; i2 < 10; i2++) {
					c_tmp[i2] = valorValidoNoCromossomo(c_tmp);
				}
				crom_valido = cromossomoValido(c_tmp, viajante);
			}
			viajante[i].setCaminho(c_tmp);
                        viajante[i].CalDistancia(distancias);
		}
		//return viajante;
	}

//ok
private static int[] resetaCromossomo() {
		int[] c = new int[10];
		for (int i = 0; i < 10; i++) {
			c[i] = -1;
		}
		return c;
	}


//ok
private static int valorValidoNoCromossomo(int[] c_tmp) {
		int crom_temp;
		boolean valido;
		do {
			crom_temp = new Random().nextInt(10);
			valido = true;
			for (int i = 0; i < 10; i++) {
				if (c_tmp[i] == crom_temp)
					valido = false;
			}
		} while (!valido);
		return crom_temp;
	}



private static void imprimir(Viajante[] viajante) {

		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				System.out.print((viajante[i].getCaminho()[j]+1) + " => ");
			}
			System.out.print((viajante[i].getCaminho()[0]+1) + " ");
			System.out.println("Distancia: " + viajante[i].getDistP());
		}
	}

	private static void calcularResultado(Viajante[] viajante, float[][] distancia) {
		// calculando o resultado
		for (int i = 0; i < 10; i++) {
			viajante[i].CalDistancia(distancia);
		}

	}







	

	public static void renovarCromossomos(Viajante[] viajante, float taxaMortalidade) {

		int inicioExcluidos = (int) (taxaMortalidade * 10);

		int i, i2 = 0;

		for (i = inicioExcluidos; i < 10; i++) {

			boolean valido = false;

			while (!valido) {

				int[] c_tmp = new  int[10];
                                 c_tmp = resetaCromossomo();

				// pegando 2 pais aleatoriamente
				int pai1, pai2;

				pai1 = new Random().nextInt(inicioExcluidos);
				do {
					pai2 = new Random().nextInt(inicioExcluidos);
				} while ((pai1 == pai2)
						&& (viajante[pai1].getDistP() != viajante[pai2].getDistP()));

				// pegando 3 caracteristicas do pai 1 aleatoriamente
				for (i2 = 0; i2 < 3; i2++) {
					int pos;
					pos = new Random().nextInt(10);
					c_tmp[pos] = viajante[pai1].getCaminho()[pos];
				}
				// pegando restante do pai 2
				for (i2 = 0; i2 < 3; i2++) {
					int pos = new Random().nextInt(10);
					if (c_tmp[pos] == -1) {
						if (valorValidoNoCromossomo(viajante[pai2].getCaminho()[pos],
								c_tmp)) {
							c_tmp[pos] = viajante[pai2].getCaminho()[pos];
						}
					}
				}

				// preenchendo o restante com aleatorios
				for (i2 = 0; i2 < 10; i2++) {
					if (c_tmp[i2] == -1) {
						int crom_temp = valorValidoNoCromossomo(c_tmp);
						c_tmp[i2] = crom_temp;
					}
				}

				// verificando se é valido
				valido = cromossomoValido(c_tmp, viajante);
				if (valido) {
					viajante[i].setCaminho(c_tmp);// = c_tmp;
				}
			}
		}

	}







	private static boolean valorValidoNoCromossomo(int valor, int[] c_tmp) {
		int crom_temp = valor;
		boolean valido;

		valido = true;
		for (int ii = 0; ii < 10; ii++) {
			if (c_tmp[ii] == crom_temp)
				valido = false;
		}

		return valido;
	}

	private static boolean cromossomoValido(int[] c_tmp, Viajante[] viajante) {
		int j, j2;
		boolean crom_valido = true;

		for (j = 0; j < 10; j++) {
			int n_iguais = 0;
			for (j2 = 0; j2 < 10; j2++) {
				if (c_tmp[j2] == viajante[j].getCaminho()[j2]) {
					n_iguais++;
				}
			}

			if (n_iguais == 10)
				crom_valido = false;
		}
		return crom_valido;
	}







    private void B1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B1MouseClicked

        //rand cordenadas
        Random random = new Random();

        Graphics g = P1.getGraphics();
        Graphics2D g2d = (Graphics2D) g;

          p=10;

        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, 320, 320);


        for (int i = 0; i < 10; i++) {
            CORDENADAS[i][0] = random.nextInt(310);
            CORDENADAS[i][1] = random.nextInt(310);
        }


        g2d.setColor(Color.YELLOW);

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if (i != j) {
                    g2d.drawLine(CORDENADAS[i][0], CORDENADAS[i][1], CORDENADAS[j][0], CORDENADAS[j][1]);
                }
            }
        }

        for (int i = 0; i < 10; i++) {
            g2d.setColor(Color.DARK_GRAY);
            g2d.drawString("" + (i + 1), CORDENADAS[i][0] - 3, CORDENADAS[i][1] - 5);
            g2d.setColor(Color.red);
            g2d.drawOval(CORDENADAS[i][0] - 2, CORDENADAS[i][1] - 2, 5, 5);
        }



    }//GEN-LAST:event_B1MouseClicked

    private void B3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B3MouseClicked
        // TODO add your handling code here:
        //rand rotas

        Viajante V = new Viajante();

        for (int i = 0; i < 10; i++) {
            V.RandCaminho();

            for (int j = 1; j <= 10; j++) {
                Tab2.setValueAt(V.getCaminho()[j - 1]+1, i, j);
            }
        }


    }//GEN-LAST:event_B3MouseClicked
    int p = 0;
    private void P1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_P1MouseClicked

        Graphics g = P1.getGraphics();
        Graphics2D g2d = (Graphics2D) g;
        if (p == 0) {
            g2d.setColor(Color.WHITE);
            g2d.fillRect(0, 0, 320, 320);
        }

        //captura as cordendas
        if (P1.getMousePosition().x <= 310 && P1.getMousePosition().x >= 10
                && P1.getMousePosition().y <= 310 && P1.getMousePosition().y >= 10) {



            if (p == 10) {

                g2d.setColor(Color.WHITE);
                g2d.fillRect(0, 0, 320, 320);

                p = 0;

                CORDENADAS = new int[][]{{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
                            {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};

            } else {
                CORDENADAS[p][0] = P1.getMousePosition().x;
                CORDENADAS[p][1] = P1.getMousePosition().y;


                g2d.setColor(Color.DARK_GRAY);
                g2d.drawString("" + (p + 1), CORDENADAS[p][0] - 3, CORDENADAS[p][1] - 5);
                g2d.setColor(Color.red);
                g2d.drawOval(CORDENADAS[p][0] - 2, CORDENADAS[p][1] - 2, 5, 5);

                if (p == 9) {
                    g2d.setColor(Color.YELLOW);

                    for (int i = 0; i < 10; i++) {
                        for (int j = 0; j < 10; j++) {
                            if (i != j) {
                                g2d.drawLine(CORDENADAS[i][0], CORDENADAS[i][1], CORDENADAS[j][0], CORDENADAS[j][1]);
                            }
                        }
                    }

                    for (int i = 0; i < 10; i++) {
                        g2d.setColor(Color.DARK_GRAY);
                        g2d.drawString("" + (i + 1), CORDENADAS[i][0] - 3, CORDENADAS[i][1] - 5);
                        g2d.setColor(Color.red);
                        g2d.drawOval(CORDENADAS[i][0] - 2, CORDENADAS[i][1] - 2, 5, 5);
                    }
                }



                p++;
            }
        }


    }//GEN-LAST:event_P1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B1;
    private javax.swing.JButton B2;
    private javax.swing.JButton B3;
    private javax.swing.JComboBox CB;
    private javax.swing.JPanel P1;
    private javax.swing.JTable Tab2;
    private javax.swing.JTable Tab3;
    private javax.swing.JTextField Te;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
}
